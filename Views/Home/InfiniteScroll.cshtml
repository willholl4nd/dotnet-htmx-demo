@model DemoObject
@using dotnet_html_sortable_table.Models;

@{
  ViewData["Title"] = "Infinite Scroll";
  bool split = (bool)ViewData["split"];
}

<style type="text/css" media="all">
  .buttons {
    display: flex;
    justify-content: center;
  }

  .button-text {
    font-size: 24px;
    margin: 5px;
  }

</style>

<div class="buttons">
  <a class="btn btn-primary button-text" href="/Scroll?split=False">Full Scroll</a>
  <a class="btn btn-primary button-text" href="/Scroll?split=True">Split Scroll</a>
</div>

<div>
  <p>Next up is the infinite scrolling effect you see on many social media applications. This is also extremely accessible through the use of HTMX. In this scenario, I have two different variations to demo. The first is the full scroll option, and the second is the split scroll option. 
  </p>
  <p>The first option is where the user will scroll to the bottom and that's when more content will be requested and appended to the table. The second option is where halfway down the table, we will request more, hopefully giving the illusion to the user that there is a never ending spring of content. The way to do this is to add trigger on reveal, which allows for a request to be triggered when that HTML element is rendered on the page and revealed.</p>
</div>

<hr>
<br>

<table class="table"
  <thead>
    <tr class="headers">
      <th>
        @Html.DisplayNameFor(model => model.Table[0].Id)
      </th>
      <th>
        @Html.DisplayNameFor(model => model.Table[0].RandInt)
      </th>
      <th>
        @Html.DisplayNameFor(model => model.Table[0].Name)
      </th>
    </tr>
  </thead>

  <tbody id="tablecontent"> 
    @await Html.PartialAsync("_ScrollTable", Model.Table)
  </tbody>

</table>
 
